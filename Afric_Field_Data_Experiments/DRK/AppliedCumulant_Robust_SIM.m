function AppliedCumulant_Robust_SIM
%% Afric_Sim_test_ESPRIT
clc;clear;
%% Initializations
alpha = 1; %ground weighting factor
beta = 1;   %veg weighting factor

Pol_ground = [1;1;0]./sqrt(2);
Pol_vegitation = [1;1;1]./sqrt(3);

eye_2 = 0;
G_O = 20;
ground_offset = G_O*pi/180; % ground interferomitry offset
V_O = 60;
vegitation_offset = V_O*pi/180;    % veg interferomitry offset

Averaged_samples = 20;
Window_optimal = 81;    %size of window
SNR_samples = 30;

ground_angle_4 = zeros(SNR_samples,1);
ground_angle_2 = zeros(SNR_samples,1);

vegitation_angle_4 = zeros(SNR_samples,1);
vegitation_angle_2 = zeros(SNR_samples,1);

ground_abs_4 = zeros(SNR_samples,1);
ground_abs_2 = zeros(SNR_samples,1);

vegitation_abs_4 = zeros(SNR_samples,1);
vegitation_abs_2 = zeros(SNR_samples,1);

SNR = zeros(1,SNR_samples);
%% Matrix Construction
for SNR_sample = fliplr(1:SNR_samples);
    
    SNR(SNR_sample)=SNR_sample-15;
    Noise = (10^(-SNR(SNR_sample)/20))/sqrt(3);
    
    for unusedvariable = 1:Averaged_samples
        
        %% Matrix Construction
        
        g =  Pol_ground*exp(1i*2*pi*rand(1,Window_optimal));
        v =  Pol_vegitation*exp(1i*2*pi*rand(1,Window_optimal));
        
        s1 = alpha*g + beta*v;
        s2 = alpha*exp(1i*ground_offset)*g + beta*exp(1i*vegitation_offset)*v;
        
        s1_Noise = s1 + Noise*sqrt(-2*log(1-rand(3,Window_optimal))).*exp(1i*2*pi*rand(3,Window_optimal));
        s2_Noise = s2 + Noise*sqrt(-2*log(1-rand(3,Window_optimal))).*exp(1i*2*pi*rand(3,Window_optimal));
        
        %% Second Order Stats
        
        S1_2 = [s1_Noise(1,:)
            s1_Noise(2,:)
            s1_Noise(3,:)];
        
        S2_2 = [s2_Noise(1,:)
            s2_Noise(2,:)
            s2_Noise(3,:)];
        
        R1_2 = S1_2*S1_2'/Window_optimal;
        R2_2 = S1_2*S2_2'/Window_optimal;
        
        [eigenvec_2,eigenval_2] =eig((pinv(R1_2 + eye_2*eye(3)))...
            *R2_2,'nobalance');
        
        [~,srt_2]=sort(abs(diag(eigenval_2)),'descend');
        
        Leig_copol = (abs(eigenval_2(srt_2(1),srt_2(1)))^2)....
            *abs(eigenvec_2(1,srt_2(1)))^2....
            + abs(eigenvec_2(2,srt_2(1)))^2;
        
        SLeig_copol = (abs(eigenval_2(srt_2(1),srt_2(1)))^2)....
            *abs(eigenvec_2(1,srt_2(2)))^2....
            + abs(eigenvec_2(2,srt_2(2)))^2;
        
        if (Leig_copol >= SLeig_copol)
            
            ground_angle_2(SNR_sample,1) = ground_angle_2(SNR_sample,1)....
                + angle(eigenval_2(srt_2(1),srt_2(1)))/Averaged_samples;
            
            vegitation_angle_2(SNR_sample,1) = vegitation_angle_2(SNR_sample,1)....
                + angle(eigenval_2(srt_2(2),srt_2(2)))/Averaged_samples;
            
            ground_abs_2(SNR_sample,1) = ground_abs_2(SNR_sample,1)....
                + sqrt(abs(eigenval_2(srt_2(1),srt_2(1))))/Averaged_samples;
            
            vegitation_abs_2(SNR_sample,1) = vegitation_abs_2(SNR_sample,1)....
                + sqrt(abs(eigenval_2(srt_2(2),srt_2(2))))/Averaged_samples;
        else
            
            ground_angle_2(SNR_sample,1) = ground_angle_2(SNR_sample,1)....
                + angle(eigenval_2(srt_2(2),srt_2(2)))/Averaged_samples;
            
            vegitation_angle_2(SNR_sample,1) = vegitation_angle_2(SNR_sample,1)....
                + angle(eigenval_2(srt_2(1),srt_2(1)))/Averaged_samples;
            
            ground_abs_2(SNR_sample,1) = ground_abs_2(SNR_sample,1)....
                + sqrt(abs(eigenval_2(srt_2(2),srt_2(2))))/Averaged_samples;
            
            vegitation_abs_2(SNR_sample,1) = vegitation_abs_2(SNR_sample,1)....
                + sqrt(abs(eigenval_2(srt_2(1),srt_2(1))))/Averaged_samples;
        end
        
        %% Fourth Order Statistics
        clc;
        [ Cumulant_11, Cumulant_12] = Cumulant( s1_Noise ,s2_Noise,Window_optimal );
        
        [~,eigenvalCov11_4] = eig(Cumulant_11,'nobalance');
                
        eye_4 = mean(diag(eigenvalCov11_4))/max(abs(diag(eigenvalCov11_4)))^2;
        
        [eigenvec_4,eigenval_4] = eig((pinv(Cumulant_11 + eye_4*eye(6)))...
            *Cumulant_12,'nobalance');
        
        [~,srt_4] = sort(abs(diag(eigenval_4)),'descend');
        
        LeigTemp  = (abs(eigenval_4(srt_4(1),srt_4(1))))^2....
            *(abs(eigenvec_4(3,srt_4(1)))^2....
            + abs(eigenvec_4(5,srt_4(1)))^2....
            + abs(eigenvec_4(6,srt_4(1)))^2);
        
        SLeigTemp = (abs(eigenval_4(srt_4(2),srt_4(2))))^2....
            *(abs(eigenvec_4(3,srt_4(2)))^2....
            + abs(eigenvec_4(5,srt_4(2)))^2....
            + abs(eigenvec_4(6,srt_4(2)))^2);
        
        if LeigTemp >= SLeigTemp
            vegitation_angle_4(SNR_sample,1) = vegitation_angle_4(SNR_sample,1)....
                + 0.5*angle(eigenval_4(srt_4(1),srt_4(1)))/Averaged_samples;
            
            ground_angle_4(SNR_sample,1) = ground_angle_4(SNR_sample,1)....
                + 0.5*angle(eigenval_4(srt_4(2),srt_4(2)))/Averaged_samples;
            
            vegitation_abs_4(SNR_sample,1) = vegitation_abs_4(SNR_sample,1)....
                + sqrt(abs(eigenval_4(srt_4(1),srt_4(1))))/Averaged_samples;
            
            ground_abs_4(SNR_sample,1) = ground_abs_4(SNR_sample,1)....
                + sqrt(abs(eigenval_4(srt_4(2),srt_4(2))))/Averaged_samples;
            
        else
            
            vegitation_angle_4(SNR_sample,1) = vegitation_angle_4(SNR_sample,1)....
                + 0.5*angle(eigenval_4(srt_4(2),srt_4(2)))/Averaged_samples;
            
            ground_angle_4(SNR_sample,1) = ground_angle_4(SNR_sample,1)....
                + 0.5*angle(eigenval_4(srt_4(1),srt_4(1)))/Averaged_samples;
            
            vegitation_abs_4(SNR_sample,1) = vegitation_abs_4(SNR_sample,1)....
                + sqrt(abs(eigenval_4(srt_4(2),srt_4(2))))/Averaged_samples;
            
            ground_abs_4(SNR_sample,1) = ground_abs_4(SNR_sample,1)....
                + sqrt(abs(eigenval_4(srt_4(1),srt_4(1))))/Averaged_samples;
        end
    end
end
%% Plotting Results
figure(2);
title('2nd and 4rth Order ESPRIT Interferometric Phases');
xlabel('SNR dB');ylabel('Int Phase (Degrees)');
hold on;
plot(SNR,(ground_angle_4)*180/pi,'bx');
plot(SNR,(vegitation_angle_4)*180/pi,'gx');
plot(SNR,(ground_angle_2)*180/pi,'bo');
plot(SNR,(vegitation_angle_2)*180/pi,'go');
plot(SNR,-V_O*ones(1,SNR_samples),'g');
plot(SNR,-G_O*ones(1,SNR_samples),'b');
% axis([-10,20,-V_O-5,-G_O+5])
legend('4rth Order Ground','4rth Order Vegetation','2nd Order Ground','2nd Order Vegetaion','Location','east')
hold off
%
figure(3);
title('2nd and 4rth Order ESPRIT Coherance');
xlabel('SNR dB');ylabel('Magnitude');
hold on;
plot(SNR,ground_abs_4,'bx');
plot(SNR,vegitation_abs_4,'gx');
plot(SNR,ground_abs_2,'bo');
plot(SNR,vegitation_abs_2,'go');
% axis([-10,20,0,2])
legend('4rth Order Ground','4rth Order Vegetation','2nd Order Ground','2nd Order Vegetaion','Location','northwest')
hold off
end
%% Cumulant
function [ Cumulant_11,Cumulant_12] = Cumulant( s1_Noise,s2_Noise ,Window_optimal)
        %% Forming the Six Arrays
        S1_2 = [s1_Noise(1,:)
            s1_Noise(2,:)
            s1_Noise(3,:)];
        
        S2_2 = [s2_Noise(1,:)
            s2_Noise(2,:)
            s2_Noise(3,:)];
        
        R11_2 = S1_2*S1_2.'/Window_optimal;
        E_h1_h1 = R11_2(1,1);
        E_h1_v1 = R11_2(1,2);
        E_h1_x1 = R11_2(1,3);
        E_v1_v1 = R11_2(2,2);
        E_v1_x1 = R11_2(2,3);
        E_x1_x1 = R11_2(3,3);
        
        R11c_2 = S1_2*S1_2'/Window_optimal;
        E_h1_h1c = R11c_2(1,1);
        E_h1_v1c = R11c_2(1,2);
        E_h1_x1c = R11c_2(1,3);
        E_v1_h1c = R11c_2(2,1);
        E_v1_v1c = R11c_2(2,2);
        E_v1_x1c = R11c_2(2,3);
        E_x1_h1c = R11c_2(3,1);
        E_x1_v1c = R11c_2(3,2);
        E_x1_x1c = R11c_2(3,3);
        
        R12c_2 = S1_2*S2_2'/Window_optimal;
        E_h1_h2c = R12c_2(1,1);
        E_h1_v2c = R12c_2(1,2);
        E_h1_x2c = R12c_2(1,3);
        E_v1_h2c = R12c_2(2,1);
        E_v1_v2c = R12c_2(2,2);
        E_v1_x2c = R12c_2(2,3);
        E_x1_h2c = R12c_2(3,1);
        E_x1_v2c = R12c_2(3,2);
        E_x1_x2c = R12c_2(3,3);
        
        R22_2 = S2_2*S2_2.'/Window_optimal;
        E_h2_h2 = R22_2(1,1);
        E_h2_v2 = R22_2(1,2);
        E_h2_x2 = R22_2(1,3);
        E_v2_v2 = R22_2(2,2);
        E_v2_x2 = R22_2(2,3);
        E_x2_x2 = R22_2(3,3);
        
        S1_4 = [s1_Noise(1,:).*s1_Noise(1,:)
            s1_Noise(2,:).*s1_Noise(2,:)
            s1_Noise(3,:).*s1_Noise(3,:)
            s1_Noise(1,:).*s1_Noise(2,:)
            s1_Noise(1,:).*s1_Noise(3,:)
            s1_Noise(2,:).*s1_Noise(3,:)];
        
        S2_4 = [s2_Noise(1,:).*s2_Noise(1,:)
            s2_Noise(2,:).*s2_Noise(2,:)
            s2_Noise(3,:).*s2_Noise(3,:)
            s2_Noise(1,:).*s2_Noise(2,:)
            s2_Noise(1,:).*s2_Noise(3,:)
            s2_Noise(2,:).*s2_Noise(3,:)];
        
        R11_4 = S1_4*S1_4'/Window_optimal;
        R12_4 = S1_4*S2_4'/Window_optimal;

        %% Forming Cumulant One Matrix
        %% HH
        Cumulant_11(1,1) = R11_4(1,1) - E_h1_h1*conj(E_h1_h1)...
            - E_h1_h1c*E_h1_h1c ...
            - E_h1_h1c*E_h1_h1c;
        
        Cumulant_11(1,2) = R11_4(1,2) - E_h1_h1*conj(E_v1_v1)...
            - E_h1_v1c*E_h1_v1c...
            - E_h1_v1c*E_h1_v1c;
        
        Cumulant_11(1,3) = R11_4(1,3) - E_h1_h1*conj(E_x1_x1)...
            - E_h1_x1c*E_h1_x1c...
            - E_h1_x1c*E_h1_x1c;
        
        Cumulant_11(1,4) = R11_4(1,4) - E_h1_h1*conj(E_h1_v1)...
            - E_h1_h1c*E_h1_v1c...
            - E_h1_v1c*E_h1_h1c;
        
        Cumulant_11(1,5) = R11_4(1,5) - E_h1_h1*conj(E_h1_x1)...
            - E_h1_h1c*E_h1_x1c...
            - E_h1_x1c*E_h1_h1c;
        
        Cumulant_11(1,6) = R11_4(1,6) - E_h1_h1*conj(E_v1_x1)...
            - E_h1_v1c*E_h1_x1c...
            - E_h1_x1c*E_h1_v1c;
        %% VV
        Cumulant_11(2,1) = R11_4(2,1) - E_v1_v1*conj(E_h1_h1)...
            - E_v1_h1c*E_v1_h1c...
            - E_v1_h1c*E_v1_h1c;
        
        Cumulant_11(2,2) = R11_4(2,2) - E_v1_v1*conj(E_v1_v1)...
            - E_v1_v1c*E_v1_v1c...
            - E_v1_v1c*E_v1_v1c;
        
        Cumulant_11(2,3) = R11_4(2,3) - E_v1_v1*conj(E_x1_x1)...
            - E_v1_x1c*E_v1_x1c...
            - E_v1_x1c*E_v1_x1c;
        
        Cumulant_11(2,4) = R11_4(2,4) - E_v1_v1*conj(E_h1_v1)...
            - E_v1_h1c*E_v1_v1c...
            - E_v1_v1c*E_v1_h1c;
        
        Cumulant_11(2,5) = R11_4(2,5) - E_v1_v1*conj(E_h1_x1)...
            - E_v1_h1c*E_v1_x1c...
            - E_v1_x1c*E_v1_h1c;
        
        Cumulant_11(2,6) = R11_4(2,6) - E_v1_v1*conj(E_v1_x1)...
            - E_v1_v1c*E_v1_x1c...
            - E_v1_x1c*E_v1_v1c;
        %% XX
        
        Cumulant_11(3,1) = R11_4(3,1) - E_x1_x1*conj(E_h1_h1)...
            - E_x1_h1c*E_x1_h1c...
            - E_x1_h1c*E_x1_h1c;
        
        Cumulant_11(3,2) = R11_4(3,2) - E_x1_x1*conj(E_v1_v1)...
            - E_x1_v1c*E_x1_v1c...
            - E_x1_v1c*E_x1_v1c;
        
        Cumulant_11(3,3) = R11_4(3,3) - E_x1_x1*conj(E_x1_x1)...
            - E_x1_x1c*E_x1_x1c...
            - E_x1_x1c*E_x1_x1c;
        
        Cumulant_11(3,4) = R11_4(3,4) - E_x1_x1*conj(E_h1_v1)...
            - E_x1_h1c*E_x1_v1c...
            - E_x1_v1c*E_x1_h1c;
        
        Cumulant_11(3,5) = R11_4(3,5) - E_x1_x1*conj(E_h1_x1)...
            - E_x1_h1c*E_x1_x1c...
            - E_x1_x1c*E_x1_h1c;
        
        Cumulant_11(3,6) = R11_4(3,6) - E_x1_x1*conj(E_v1_x1)...
            - E_x1_v1c*E_x1_x1c...
            - E_x1_x1c*E_x1_v1c;
        %% HV
        Cumulant_11(4,1) = R11_4(4,1) - E_h1_v1*conj(E_h1_h1)...
            - E_h1_h1c*E_v1_h1c...
            - E_h1_h1c*E_v1_h1c;
        
        Cumulant_11(4,2) = R11_4(4,2) - E_h1_v1*conj(E_v1_v1)...
            - E_h1_v1c*E_v1_v1c...
            - E_h1_v1c*E_v1_v1c;
        
        Cumulant_11(4,3) = R11_4(4,3) - E_h1_v1*conj(E_x1_x1)...
            - E_h1_x1c*E_v1_x1c...
            - E_h1_x1c*E_v1_x1c;
        
        Cumulant_11(4,4) = R11_4(4,4) - E_h1_v1*conj(E_h1_v1)...
            - E_h1_h1c*E_v1_v1c...
            - E_h1_v1c*E_v1_h1c;
        
        Cumulant_11(4,5) = R11_4(4,5) - E_h1_v1*conj(E_h1_x1)...
            - E_h1_h1c*E_v1_x1c...
            - E_h1_x1c*E_v1_h1c;
        
        Cumulant_11(4,6) = R11_4(4,6) - E_h1_v1*conj(E_v1_x1)...
            - E_h1_v1c*E_v1_x1c...
            - E_h1_x1c*E_v1_v1c;
        %% HX
        Cumulant_11(5,1) = R11_4(5,1) - E_h1_x1*conj(E_h1_h1)...
            - E_h1_h1c*E_x1_h1c...
            - E_h1_h1c*E_x1_h1c;
        
        Cumulant_11(5,2) = R11_4(5,2) - E_h1_x1*conj(E_v1_v1)...
            - E_h1_v1c*E_x1_v1c...
            - E_h1_v1c*E_x1_v1c;
        
        Cumulant_11(5,3) = R11_4(5,3) - E_h1_x1*conj(E_x1_x1)...
            - E_h1_x1c*E_x1_x1c...
            - E_h1_x1c*E_x1_x1c;
        
        Cumulant_11(5,4) = R11_4(5,4) - E_h1_x1*conj(E_h1_v1)...
            - E_h1_h1c*E_x1_v1c...
            - E_h1_v1c*E_x1_h1c;
        
        Cumulant_11(5,5) = R11_4(5,5) - E_h1_x1*conj(E_h1_x1)...
            - E_h1_h1c*E_x1_x1c...
            - E_h1_x1c*E_x1_h1c;
        
        Cumulant_11(5,6) = R11_4(5,6) - E_h1_x1*conj(E_v1_x1)...
            - E_h1_v1c*E_x1_x1c...
            - E_h1_x1c*E_x1_v1c;
        %%VX
        Cumulant_11(6,1) = R11_4(6,1) - E_v1_x1*conj(E_h1_h1)...
            - E_v1_h1c*E_x1_h1c...
            - E_v1_h1c*E_x1_h1c;
        
        Cumulant_11(6,2) = R11_4(6,2) - E_v1_x1*conj(E_v1_v1)...
            - E_v1_v1c*E_x1_v1c...
            - E_v1_v1c*E_x1_v1c;
        
        Cumulant_11(6,3) = R11_4(6,3) - E_v1_x1*conj(E_x1_x1)...
            - E_v1_x1c*E_x1_x1c...
            - E_v1_x1c*E_x1_x1c;
        
        Cumulant_11(6,4) = R11_4(6,4) - E_v1_x1*conj(E_h1_v1)...
            - E_v1_h1c*E_x1_v1c...
            - E_v1_v1c*E_x1_h1c;
        
        Cumulant_11(6,5) = R11_4(6,5) - E_v1_x1*conj(E_h1_x1)...
            - E_v1_h1c*E_x1_x1c...
            - E_v1_x1c*E_x1_h1c;
        
        Cumulant_11(6,6) = R11_4(6,6) - E_v1_x1*conj(E_v1_x1)...
            - E_v1_v1c*E_x1_x1c...
            - E_v1_x1c*E_x1_v1c;
        
        %% Forming Cumulant Two Matrix
        %% HH
        Cumulant_12(1,1) = R12_4(1,1) - E_h1_h1*conj(E_h2_h2)...
            - E_h1_h2c*E_h1_h2c...
            - E_h1_h2c*E_h1_h2c;
        
        Cumulant_12(1,2) = R12_4(1,2) - E_h1_h1*conj(E_v2_v2)...
            - E_h1_v2c*E_h1_v2c...
            - E_h1_v2c*E_h1_v2c;
        
        Cumulant_12(1,3) = R12_4(1,3) - E_h1_h1*conj(E_x2_x2)...
            - E_h1_x2c*E_h1_x2c...
            - E_h1_x2c*E_h1_x2c;
        
        Cumulant_12(1,4) = R12_4(1,4) - E_h1_h1*conj(E_h2_v2)...
            - E_h1_h2c*E_h1_v2c...
            - E_h1_v2c*E_h1_h2c;
        
        
        Cumulant_12(1,5) = R12_4(1,5) - E_h1_h1*conj(E_h2_x2)...
            - E_h1_h2c*E_h1_x2c...
            - E_h1_x2c*E_h1_h2c;
        
        Cumulant_12(1,6) = R12_4(1,6) - E_h1_h1*conj(E_v2_x2)...
            - E_h1_v2c*E_h1_x2c...
            - E_h1_x2c*E_h1_v2c;
        %% VV
        Cumulant_12(2,1) = R12_4(2,1) - E_v1_v1*conj(E_h2_h2)...
            - E_v1_h2c*E_v1_h2c...
            - E_v1_h2c*E_v1_h2c;
        
        Cumulant_12(2,2) = R12_4(2,2) - E_v1_v1*conj(E_v2_v2)...
            - E_v1_v2c*E_v1_v2c...
            - E_v1_v2c*E_v1_v2c;
        
        Cumulant_12(2,3) = R12_4(2,3) - E_v1_v1*conj(E_x2_x2)...
            - E_v1_x2c*E_v1_x2c...
            - E_v1_x2c*E_v1_x2c;
        
        Cumulant_12(2,4) = R12_4(2,4) - E_v1_v1*conj(E_h2_v2)...
            - E_v1_h2c*E_v1_v2c...
            - E_v1_v2c*E_v1_h2c;
        
        Cumulant_12(2,5) = R12_4(2,5) - E_v1_v1*conj(E_h2_x2)...
            - E_v1_h2c*E_v1_x2c...
            - E_v1_x2c*E_v1_h2c;
        
        Cumulant_12(2,6) = R12_4(2,6) - E_v1_v1*conj(E_v2_x2)...
            - E_v1_v2c*E_v1_x2c...
            - E_v1_x2c*E_v1_v2c;
        %% XX
        Cumulant_12(3,1) = R12_4(3,1) - E_x1_x1*conj(E_h2_h2)...
            - E_x1_h2c*E_x1_h2c...
            - E_x1_h2c*E_x1_h2c;
        
        Cumulant_12(3,2) = R12_4(3,2) - E_x1_x1*conj(E_v2_v2)...
            - E_x1_v2c*E_x1_v2c...
            - E_x1_v2c*E_x1_v2c;
        
        Cumulant_12(3,3) = R12_4(3,3) - E_x1_x1*conj(E_x2_x2)...
            - E_x1_x2c*E_x1_x2c...
            - E_x1_x2c*E_x1_x2c;
        
        Cumulant_12(3,4) = R12_4(3,4) - E_x1_x1*conj(E_h2_v2)...
            - E_x1_h2c*E_x1_v2c...
            - E_x1_v2c*E_x1_h2c;
        
        Cumulant_12(3,5) = R12_4(3,5) - E_x1_x1*conj(E_h2_x2)...
            - E_x1_h2c*E_x1_x2c...
            - E_x1_x2c*E_x1_h2c;
        
        Cumulant_12(3,6) = R12_4(3,6) - E_x1_x1*conj(E_v2_x2)...
            - E_x1_v2c*E_x1_x2c...
            - E_x1_x2c*E_x1_v2c;
        %% HV
        
        Cumulant_12(4,1) = R12_4(4,1) - E_h1_v1*conj(E_h2_h2)...
            - E_h1_h2c*E_v1_h2c...
            - E_h1_h2c*E_v1_h2c;
        
        Cumulant_12(4,2) = R12_4(4,2) - E_h1_v1*conj(E_v2_v2)...
            - E_h1_v2c*E_v1_v2c...
            - E_h1_v2c*E_v1_v2c;
        
        Cumulant_12(4,3) = R12_4(4,3) - E_h1_v1*conj(E_x2_x2)...
            - E_h1_x2c*E_v1_x2c...
            - E_h1_x2c*E_v1_x2c;
        
        Cumulant_12(4,4) = R12_4(4,4) - E_h1_v1*conj(E_h2_v2)...
            - E_h1_h2c*E_v1_v2c...
            - E_h1_v2c*E_v1_h2c;
        
        Cumulant_12(4,5) = R12_4(4,5) - E_h1_v1*conj(E_h2_x2)...
            - E_h1_h2c*E_v1_x2c...
            - E_h1_x2c*E_v1_h2c;
        
        Cumulant_12(4,6) = R12_4(4,6) - E_h1_v1*conj(E_v2_x2)...
            - E_h1_v2c*E_v1_x2c...
            - E_h1_x2c*E_v1_v2c;
        %% HX
        Cumulant_12(5,1) = R12_4(5,1) - E_h1_x1*conj(E_h2_h2)...
            - E_h1_h2c*E_x1_h2c...
            - E_h1_h2c*E_x1_h2c;
        
        Cumulant_12(5,2) = R12_4(5,2) - E_h1_x1*conj(E_v2_v2)...
            - E_h1_v2c*E_x1_v2c...
            - E_h1_v2c*E_x1_v2c;
        
        Cumulant_12(5,3) = R12_4(5,3) - E_h1_x1*conj(E_x2_x2)...
            - E_h1_x2c*E_x1_x2c...
            - E_h1_x2c*E_x1_x2c;
        
        Cumulant_12(5,4) = R12_4(5,4) - E_h1_x1*conj(E_h2_v2)...
            - E_h1_h2c*E_x1_v2c...
            - E_h1_v2c*E_x1_h2c;
        
        Cumulant_12(5,5) = R12_4(5,5) - E_h1_x1*conj(E_h2_x2)...
            - E_h1_h2c*E_x1_x2c...
            - E_h1_x2c*E_x1_h2c;
        
        Cumulant_12(5,6) = R12_4(5,6) - E_h1_x1*conj(E_v2_x2)...
            - E_h1_v2c*E_x1_x2c...
            - E_h1_x2c*E_x1_v2c;
        % VX
        
        Cumulant_12(6,1) = R12_4(6,1) - E_v1_x1*conj(E_h2_h2)...
            - E_v1_h2c*E_x1_h2c...
            - E_v1_h2c*E_x1_h2c;
        
        Cumulant_12(6,2) = R12_4(6,2) - E_v1_x1*conj(E_v2_v2)...
            - E_v1_v2c*E_x1_v2c...
            - E_v1_v2c*E_x1_v2c;
        
        Cumulant_12(6,3) = R12_4(6,3) - E_v1_x1*conj(E_x2_x2)...
            - E_v1_x2c*E_x1_x2c...
            - E_v1_x2c*E_x1_x2c;
        
        Cumulant_12(6,4) = R12_4(6,4) - E_v1_x1*conj(E_h2_v2)...
            - E_v1_h2c*E_x1_v2c...
            - E_v1_v2c*E_x1_h2c;
        
        Cumulant_12(6,5) = R12_4(6,5) - E_v1_x1*conj(E_h2_x2)...
            - E_v1_h2c*E_x1_x2c...
            - E_v1_x2c*E_x1_h2c;
        
        Cumulant_12(6,6) = R12_4(6,6) - E_v1_x1*conj(E_v2_x2)...
            - E_v1_v2c*E_x1_x2c...
            - E_v1_x2c*E_x1_v2c;

 
end